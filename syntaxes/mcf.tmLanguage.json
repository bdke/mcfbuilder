{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MCFbuilder",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#selectors"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#file"
		},
		{
			"include": "#class"
		},
		{
			"include": "#callMethods"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.mcf",
				"match": "\\b(if|while|for|return|in|to|true|false|tag|score|else|execute|as|at|positioned|null)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.mcf",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.mcf",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.mcf",
			"match": "\\b([0-9]+|[0-9].[0-9]+)\\b"
		},
		"comments": {
			"name":"comment.line.mcf",
			"begin": "//",
			"end": "\n"
		},
		"selectors": {
			"name":"constant.other.mcf",
			"match": "@s|@r|@e|@a|@p"
		},
		"variables": {
			"name":"variable.define.mcf",
			"match": "\\b(var|global)\\s*([a-zA-Z_][a-zA-Z0-9_]*)?\\b",
			"captures": {
				"1": {
					"name":"keyword.control.mcf"
				},
				"2": {
					"name":"variable.name.mcf"
				}
			}
		},
		"class": {
			"name": "define.class.mcf",
			"match": "\\b(new)\\s*([a-zA-Z_][a-zA-Z0-9_]*)?\\b",
			"captures": {
				"1": {
					"name": "keyword.control.mcf"
				},
				"2": {
					"name": "entity.name.class.mcf"
				}
			}
		},
		"callMethods": {
			"name": "class.method.call.mcf",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\b",
			"captures": {
				"2": {
					"name": "entity.name.function.mcf"
				}
			}
		},
		"functions": {
			"name":"mcffuntion.mcf",
			"match": "(def)(\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\((.*)\\))?",
			"captures": {
				"1": {
					"name":"keyword.control.mcf"
				},
				"2": {
					"name":"temp.mcf",
					"patterns": [
						{
							"name":"temp.mcf",
							"match": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\((.*)\\)",
							"captures": {
								"1": {
									"name":"entity.name.function.mcf"
								},
								"2": {
									"name":"variable.parameter.mcf"
								}
							}
						}
					]
				}
			}
		},
		"file": {
			"name": "entity.name.section.mcf",
			"begin": "#",
			"end": "\n"
		}
	},
	"scopeName": "source.mcf"
}